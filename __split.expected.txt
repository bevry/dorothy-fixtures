===============================================================================
split on multiple args
-------------------------------------------------------------------------------
__split --target=\{result\} --delimiter=: -- a b
[status = 0]
result[0] = a
result[1] = b
===============================================================================
split on nothing
-------------------------------------------------------------------------------
__split --target=\{result\} --delimiter=: --
[status = 0]
result[@] = [ empty ]
===============================================================================
split inputs are now always inputs and not delimiters
-------------------------------------------------------------------------------
__split --target=\{result\} --delimiter=: --source=\{array\} -- $'e\nf\n\ng'
[status = 0]
result[0] = a
b
result[1] = c
result[2] = d
result[3] = e
f

g
===============================================================================
split on undeclared source
-------------------------------------------------------------------------------
__split --target=\{result\} --delimiter=: --source=\{undeclared\}
ERROR: __split: The source variable reference undeclared must be defined.
[status = 22]
result[@] = [ empty ]
===============================================================================
split on empty
-------------------------------------------------------------------------------
__split --target=\{result\} --delimiter=: -- ''
[status = 0]
result[0] = [ empty ]
===============================================================================
split on empty with no-zero-length
-------------------------------------------------------------------------------
__split --target=\{result\} --delimiter=: --no-zero-length -- ''
[status = 0]
result[@] = [ empty ]
===============================================================================
split on single character delimiter
-------------------------------------------------------------------------------
__split --target=\{result\} --delimiter=: -- $'a:b:c\nd:e:f'
[status = 0]
result[0] = a
result[1] = b
result[2] = c
d
result[3] = e
result[4] = f
===============================================================================
split on multiple character delimiter
-------------------------------------------------------------------------------
__split --target=\{result\} --delimiter=:: -- $'a::b::c\nd::e::f'
[status = 0]
result[0] = a
result[1] = b
result[2] = c
d
result[3] = e
result[4] = f
===============================================================================
split on multiple delimiters
-------------------------------------------------------------------------------
__split --target=\{result\} --delimiter=:: $'--delimiters=!@\n' -- $'a::b:!c\nd@e'
[status = 0]
result[0] = a
result[1] = b:
result[2] = c
result[3] = d
result[4] = e
===============================================================================
split on newline via argument
-------------------------------------------------------------------------------
__split --target=\{result\} $'--delimiter=\n' -- $'a\nb\nc'
[status = 0]
result[0] = a
result[1] = b
result[2] = c
===============================================================================
split on newline via process substitution
-------------------------------------------------------------------------------
__split --target=\{result\} $'--delimiter=\n'
ERROR: __split: At least one source variable reference must be provided, none were.
[status = 22]
result[@] = [ empty ]
===============================================================================
split on newline via here string
-------------------------------------------------------------------------------
__split --target=\{result\} $'--delimiter=\n'
ERROR: __split: At least one source variable reference must be provided, none were.
[status = 22]
result[@] = [ empty ]
===============================================================================
split on newline via arguments
-------------------------------------------------------------------------------
__split --target=\{result\} $'--delimiter=\n' -- a b $'c\n' $'d\n\n' e $'\n\nf' $'\n\ng\n\n'
[status = 0]
result[0] = a
result[1] = b
result[2] = c
result[3] = [ empty ]
result[4] = d
result[5] = [ empty ]
result[6] = [ empty ]
result[7] = e
result[8] = [ empty ]
result[9] = [ empty ]
result[10] = f
result[11] = [ empty ]
result[12] = [ empty ]
result[13] = g
result[14] = [ empty ]
result[15] = [ empty ]
===============================================================================
split on newline via arguments without zero-length
-------------------------------------------------------------------------------
__split --target=\{result\} --no-zero-length $'--delimiter=\n' -- a b $'c\n' $'d\n\n' e $'\n\nf' $'\n\ng\n\n'
[status = 0]
result[0] = a
result[1] = b
result[2] = c
result[3] = d
result[4] = e
result[5] = f
result[6] = g
===============================================================================
split on newline via sources and arguments without zero-length
-------------------------------------------------------------------------------
__split --target=\{result\} $'--delimiter=\n' --source=\{array\} --source=\{string\} --no-zero-length -- $'\n\nh\n\n'
[status = 0]
result[0] = e
result[1] = f
result[2] = g
result[3] = h
===============================================================================
split with invoke
-------------------------------------------------------------------------------
__split --target=\{result\} $'--delimiters=\n\t ,|' --delimiter=\*\* --no-zero-length --invoke -- __print_lines $'a\nb' $'c\td' e\ f g\,\ h i\|j k\*l\*\*m
[status = 0]
result[0] = a
result[1] = b
result[2] = c
result[3] = d
result[4] = e
result[5] = f
result[6] = g
result[7] = h
result[8] = i
result[9] = j
result[10] = k*l
result[11] = m
===============================================================================
split with invoke that fails
-------------------------------------------------------------------------------
__split --target=\{result\} --no-zero-length --invoke -- __invoke_that_fails
[status = 210]
result[@] = [ empty ]
===============================================================================
split with invoke try that skips failure
-------------------------------------------------------------------------------
__split --target=\{result\} --no-zero-length --invoke=try -- __invoke_that_fails
[status = 0]
result[0] = a
result[1] = b
result[2] = c
===============================================================================
split with invoke and source without zero-length
-------------------------------------------------------------------------------
__split --target=\{result\} --source=\{array\} --source=\{string\} --no-zero-length --invoke -- __print_lines $'h\ni\n\n'
[status = 0]
result[0] = e
result[1] = f
result[2] = g
result[3] = h
result[4] = i
===============================================================================
split with invoke and source and stdin without zero-length
-------------------------------------------------------------------------------
__split --target=\{result\} --source=\{string\} --no-zero-length --stdin --invoke -- __print_lines $'h\ni\n\n'
[status = 0]
result[0] = e
result[1] = f
result[2] = g
result[3] = a
result[4] = b
result[5] = c
result[6] = d
result[7] = h
result[8] = i
===============================================================================
split with append on empty target
-------------------------------------------------------------------------------
__split --target=\{result\} --append $'--delimiters=\n\t ,|' --no-zero-length -- yes
[status = 0]
result[0] = yes
===============================================================================
split with append and defaulted delim
-------------------------------------------------------------------------------
__split --target=\{shared\} -- $'a\nb' c d
[status = 0]
shared[0] = a
shared[1] = b
shared[2] = c
shared[3] = d
-------------------------------------------------------------------------------
__split --target=\{shared\} --append -- $'e\nf' $'g\nh'
[status = 0]
shared[0] = a
shared[1] = b
shared[2] = c
shared[3] = d
shared[4] = e
shared[5] = f
shared[6] = g
shared[7] = h
-------------------------------------------------------------------------------
__split --target=\{shared\} --source=\{array\}
[status = 0]
shared[0] = i
shared[1] = j
shared[2] = k
shared[3] = l